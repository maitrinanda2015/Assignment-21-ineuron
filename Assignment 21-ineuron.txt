1.You are given a binary tree. The binary tree is represented using the TreeNode class. Each TreeNode has an integer value and left and right children, represented using the TreeNode class itself. Convert this binary tree into a binary search tree.

Input:

        10

       /   \

     2      7

   /   \

 8      4

Output:

        8

      /   \

    4     10

  /   \

2      7

ans-:import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}

class BinaryTreeToBST {
    public static TreeNode convertToBST(TreeNode root) {
        // Step 1: Perform inorder traversal to get the sorted list of nodes
        List<Integer> nodes = new ArrayList<>();
        inorderTraversal(root, nodes);

        // Step 2: Sort the list of nodes in ascending order
        Collections.sort(nodes);

        // Step 3: Construct the new binary search tree
        return constructBST(nodes, 0, nodes.size() - 1);
    }

    private static void inorderTraversal(TreeNode node, List<Integer> nodes) {
        if (node == null) {
            return;
        }

        inorderTraversal(node.left, nodes);
        nodes.add(node.val);
        inorderTraversal(node.right, nodes);
    }

    private static TreeNode constructBST(List<Integer> nodes, int start, int end) {
        if (start > end) {
            return null;
        }

        int mid = start + (end - start) / 2;
        TreeNode root = new TreeNode(nodes.get(mid));

        root.left = constructBST(nodes, start, mid - 1);
        root.right = constructBST(nodes, mid + 1, end);

        return root;
    }

    public static void inorderTraversalBST(TreeNode node) {
        if (node == null) {
            return;
        }

        inorderTraversalBST(node.left);
        System.out.print(node.val + " ");
        inorderTraversalBST(node.right);
    }

    public static void main(String[] args) {
        // Create the binary tree
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(8);
        root.left.right = new TreeNode(4);

        // Convert the binary tree to a binary search tree
        TreeNode bstRoot = convertToBST(root);

        // Perform inorder traversal on the resulting binary search tree
        inorderTraversalBST(bstRoot);
    }
}

2.Given a Binary Search Tree with all unique values and two keys. Find the distance between two nodes in BST. The given keys always exist in BST.
**Input-1:**

n = 9

values = [8, 3, 1, 6, 4, 7, 10, 14,13]

node-1 = 6

node-2 = 14

**Output-1:**

The distance between the two keys = 4

**Input-2:**

n = 9

values = [8, 3, 1, 6, 4, 7, 10, 14,13]

node-1 = 3

node-2 = 4

**Output-2:**

The distance between the two keys = 2

ans-:
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}

class BSTDistance {
    public static int findDistance(TreeNode root, int node1, int node2) {
        // Find the Lowest Common Ancestor (LCA)
        TreeNode lca = findLCA(root, node1, node2);

        // Find the distance from the LCA to node1
        int distance1 = findDistanceFromLCA(lca, node1, 0);

        // Find the distance from the LCA to node2
        int distance2 = findDistanceFromLCA(lca, node2, 0);

        // Calculate the total distance
        return distance1 + distance2;
    }

    private static TreeNode findLCA(TreeNode node, int node1, int node2) {
        if (node == null) {
            return null;
        }

        if (node.val > node1 && node.val > node2) {
            return findLCA(node.left, node1, node2);
        }

        if (node.val < node1 && node.val < node2) {
            return findLCA(node.right, node1, node2);
        }

        return node;
    }

    private static int findDistanceFromLCA(TreeNode node, int target, int distance) {
        if (node == null) {
            return -1;
        }

        if (node.val == target) {
            return distance;
        }

        if (target < node.val) {
            return findDistanceFromLCA(node.left, target, distance + 1);
        }

        return findDistanceFromLCA(node.right, target, distance + 1);
    }

    public static void main(String[] args) {
        // Create the Binary Search Tree
        TreeNode root = new TreeNode(8);
        root.left = new TreeNode(3);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(6);
        root.left.right.left = new TreeNode(4);
        root.left.right.right = new TreeNode(7);
        root.right = new TreeNode(10);
        root.right.right = new TreeNode(14);
        root.right.right.left = new TreeNode(13);

        int node1 = 6;
        int node2 = 14;

        // Find the distance between the two nodes in the BST
        int distance = findDistance(root, node1, node2);

        System.out.println("The distance between the two keys = " + distance);
    }
}
3.Write a program to convert a binary tree to a doubly linked list.

Input:

        10

       /   \

     5     20

           /   \

        30     35

Output:

5 10 30 20 35

ans-:
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}

class DoublyLinkedListNode {
    int val;
    DoublyLinkedListNode prev;
    DoublyLinkedListNode next;

    public DoublyLinkedListNode(int val) {
        this.val = val;
    }
}

class BinaryTreeToDoublyLinkedList {
    private static DoublyLinkedListNode prev;

    public static DoublyLinkedListNode convertToDoublyLinkedList(TreeNode root) {
        if (root == null) {
            return null;
        }

        DoublyLinkedListNode dummy = new DoublyLinkedListNode(-1);
        prev = dummy;

        inOrderTraversal(root);

        dummy.next.prev = null;
        return dummy.next;
    }

    private static void inOrderTraversal(TreeNode node) {
        if (node == null) {
            return;
        }

        inOrderTraversal(node.left);

        DoublyLinkedListNode curr = new DoublyLinkedListNode(node.val);
        prev.next = curr;
        curr.prev = prev;
        prev = curr;

        inOrderTraversal(node.right);
    }

    public static void printDoublyLinkedList(DoublyLinkedListNode head) {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the binary tree
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(5);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(30);
        root.right.right = new TreeNode(35);

        // Convert the binary tree to a doubly linked list
        DoublyLinkedListNode head = convertToDoublyLinkedList(root);

        // Print the doubly linked list
        printDoublyLinkedList(head);
    }
}
4.Write a program to connect nodes at the same level.

Input:

        1

      /   \

    2      3

  /   \   /   \

4     5 6    7

Output:

1 → -1

2 → 3

3 → -1

4 → 5

5 → 6

6 → 7

7 → -1

ans-:
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode next;

    public TreeNode(int val) {
        this.val = val;
    }
}

class BinaryTreeLevelConnect {
    public static void connectNodesAtSameLevel(TreeNode root) {
        if (root == null) {
            return;
        }

        TreeNode levelStart = root;

        while (levelStart != null) {
            TreeNode curr = levelStart;
            TreeNode dummy = new TreeNode(-1);
            TreeNode prev = dummy;

            while (curr != null) {
                if (curr.left != null) {
                    prev.next = curr.left;
                    prev = prev.next;
                }
                if (curr.right != null) {
                    prev.next = curr.right;
                    prev = prev.next;
                }

                curr = curr.next;
            }

            levelStart = dummy.next;
        }
    }

    public static void printConnectedNodes(TreeNode root) {
        while (root != null) {
            TreeNode curr = root;
            while (curr != null) {
                System.out.print(curr.val + " -> ");
                curr = curr.next;
            }
            System.out.println("-1");
            root = root.left;
        }
    }

    public static void main(String[] args) {
        // Create the binary tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        // Connect nodes at the same level
        connectNodesAtSameLevel(root);

        // Print the connected nodes
        printConnectedNodes(root);
    }
}



















